---
title: "Knitr and rmarkdown"
author: "Tim Triche, Jr."
format: 
  html:
    toc: true
engine: knitr
execute:
  warning: false
filters:
  - webr
webr:
  packages: ['gapminder','dplyr','ggplot2']
---

## What `knitr` does

`knitr` _knits_ markdown documents into webpages (or slides, or PDFs, or...). 
It takes a moment to load the Rstudio plumbing for knitr/rmarkdown and the 
[Software Carpentries knitr lesson](https://swcarpentry.github.io/r-novice-gapminder/14-knitr-markdown.html), so here are a few examples of why you might want 
to be patient. Note: you don't have to host the output! In fact, Rstudio has a 
nice option where you can publish your Rmarkdown (or Quarto) documents directly 
to [rpubs.com](https://rpubs.com/ttriche/1011627).

## What `rmarkdown` does

`knitr` calls the `rmarkdown` package to process the chunks of code and markdown
that you have asked it to knit.  This implies that we can test `rmarkdown` along
with other aspects of the rendering process. Below, I use the `volcano` dataset,
which comes with base R. Press play below to plot it:

```{webr-r}
filled.contour(volcano, 
               main="Elevation of Maunga Whau, Aotearoa, in meters")
```

You might wonder how a piece of Rmarkdown is rendered into an HTML document.
Let's run a bit of R code on the `volcano` dataset and render it to HTML:

```{r}
#| label: Rmarkdown
markdown <- paste("
* Dataset: the Mountain of the Whau Tree
* μ(elevation) = ", mean(volcano), "m
* σ(elevation) = ", sd(volcano), "m
",
sep = "")

library("rmarkdown")
cat(markdown, file="markdown")
rmarkdown::render("markdown", 
                  output_format = "html_document", 
                  output_file = "markdown.html")
```

You can [view the output in your browser](markdown.html) if you like.
Not everything works the way we expect on the first try! It turns out that if
there is leading text, `rmarkdown` will pout. You can inspect the input too:

```{webr-r}
markdown <- paste("
* Dataset: the Mountain of the Whau Tree
* μ(elevation) = ", mean(volcano), "m
* σ(elevation) = ", sd(volcano), "m
",
sep = "")

cat(markdown, "\n")
```

If the rendering step works as expected, [the HTML output](markdown.html) 
will look like so:

* Dataset: the Mountain of the Whau Tree
* μ(elevation) = 130.187865083852m
* σ(elevation) = 25.8323325343889m

Full disclosure: this particular document is also a sandbox for me (Tim)
to experiment with <a href="https://docs.r-wasm.org/webr/latest/">webR</a>
and dynamic rendering, for example using knitr to make
<a href="/slides/webR/#/knitr">reveal.js slides</a>.

## What `webR` does

If you pressed play on the volcano or markdown examples, you might wonder what's
happening behind the scenes. [More information about webR can be found here](https://docs.r-wasm.org/webr/latest/).

## A bit of background

The Gapminder dataset you may have used is from a TED talk by Hans Rosling, 
which you can view <a href="https://www.youtube.com/watch?v=hVimVzgtD6w">here</a>. The Roslings compiled actuarial records of life expectancy, income, and
population size for countries around the world over many years. Hans
died in 2017, but the impact of his work lives on, partly because the
<a href="https://www.gapminder.org/about/about-gapminder/history/">Gapminder 
foundation</a> helps keep the data and tools from the talk available and usable.

You too can become immortal in this way. The first step is to make your data and
analyses reproducible, so that other people can understand and build upon them.
Let's use Rosling's data to motivate a few examples. If you want to peek
at the <a href="https://github.com/trichelab/trichelab.github.io/blob/gh-pages/webR/gapminder/Gapminder.qmd">markdown document itself</a>, please do!


## The gapminder data in R

An excerpt of the data from Rosling's talk is available in R via the
<a href="https://cran.r-project.org/package=gapminder">`gapminder`</a>
package, which can be installed from CRAN via `install.packages("gapminder")`.
We can check which version was installed:

```{webr-r}
install.packages("gapminder")
library("gapminder")
paste("gapminder", packageVersion("gapminder"))
```

It's a good idea to keep track of versions, in case something were to change.
When this document was compiled, the version was 
`{r} paste("gapminder", packageVersion("gapminder"))`.


## A quick look

Let's take a quick look at the `gapminder` data itself. If you type the name
of a data object into R, you will (almost always) get a glimpse of the data:

```{r}
#| label: Quick look 
library("gapminder")
gapminder
```

This isn't necessarily an ideal way to inspect a dataset.  The `head` and `tail`
functions in R can be helpful when a dataset is too big to digest in one shot. 
What happens when you call these functions on the `gapminder` dataset?

```{webr-r}
library("gapminder")
head(gapminder)
tail(gapminder)
```

## Plotting with ggplot2

Earlier in the workshop, you plotted some of the gapminder data with `ggplot2`:

```{r}
#| label: A faceted plot

library("gapminder") 
americas <- gapminder[gapminder$continent == "Americas",]

library("ggplot2")
ggplot(data = americas, 
       mapping = aes(x = year, 
                     y = lifeExp, 
                     color = continent)) +
  geom_line() + 
  facet_wrap( ~ country) +
  labs(
    x = "Year",              # x axis title
    y = "Life expectancy",   # y axis title
    title = "Figure 1",      # main title of figure
    color = "Continent"      # title of legend
  ) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  

```

However, if you have seen Rosling's talk, you may recall a particular style 
of plot (the "bubble plot") used to great impact.  Can we recreate that plot?


## A bubble plot

Let's plot the relationships between life expectancy and gross domestic product
with the size of the dots representing the population of a country in millions.
We will start by doing this for the year 2007, like Rosling did. (There is data 
from `{r} nrow(subset(gapminder, year == "2007"))` countries in 2007.) We'll use
the included `continent_colors` from the `gapminder` package to standardize the
fill colors (it is a good idea to standardize colors when making plots so that 
your audience can expect for a given color to mean the same thing all the time).

```{r}
#| label: 2007 bubble plot

library("gapminder")
library("ggplot2")
ggplot(subset(gapminder, 
              year == "2007"), 
       aes(x = gdpPercap, 
           y = lifeExp, 
           size = pop,
           fill = continent)) + 
  geom_point(alpha=0.5, shape=21, color="black") +
  scale_size(range = c(.1, 24), name="Population (M)") +
  scale_fill_manual(values = continent_colors) + 
  labs(y = "Life Expectancy (years)", 
       x = "GDP per Capita (US$)") +
  guides(size = "none", fill = "none") + 
  theme_classic() 

```

### Challenge

Suppose you wanted to look at a different year's worth of data (say, 1952), or
a specific continent (for example, Asia). Can you modify the code so that it
plots the data _you_ want it to plot? Can you add a title in `labs()` and 
restore the `guides()` legend for `fill`, as well?

```{webr-r}

library("gapminder")
library("ggplot2")

ggplot(subset(gapminder, 
              year == "2007"), 
       aes(x = gdpPercap, 
           y = lifeExp, 
           size = pop,
           fill = continent)) + 
  geom_point(alpha=0.5, shape=21, color="black") +
  scale_size(range = c(.1, 24), name="Population (M)") +
  scale_fill_manual(values = continent_colors) + 
  labs(y = "Life Expectancy (years)", 
       x = "GDP per Capita (US$)") +
  guides(size = "none", fill = "none") + 
  theme_classic()

```
