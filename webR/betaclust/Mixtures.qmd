---
title: "Modeling phenotypes with mixtures"
repo-url: https://github.com/trichelab/trichelab.github.io/
format: 
  html:
    toc: true
    toc-depth: 3
    toc-expand: 3
    toc-title: Sections
    code-fold: true
    code-links:
      - text: Quarto (source code)
        icon: github
        href: https://github.com/trichelab/trichelab.github.io/blob/gh-pages/webR/mixtures/Mixtures.qmd
engine: knitr
execute:
  warning: false
filters:
  - webr
webr:
  packages: ['mixR','survival','survminer','ggbeeswarm','patchwork','ggplot2']
---


## Background: unexplained phenotypic variability

It is not uncommon for a genetic condition to show unexplained heterogeneity;
the same genotype(s) can produce different effects in comparable individuals. 
A particularly vivid example comes from neurofibromatosis type 1:
<a href="https://www.youtube.com/watch?v=V0Hp3HnS8M4">identical twins who look nothing alike</a>.

Is this divergence restricted to rare predisposition syndromes?
<a href="https://www.cell.com/fulltext/S0092-8674(15)01689-X">Studies of the _TRIM28_ gene in childhood obesity</a> suggest it is not, and that genetic 
differences in epigenetic machinery may create stochastic branch-points in
development. We might wonder if approaches to finding 'splits' could be handy.

In short, we often ask 'one lump or two?' Mixture models can help answer this.


## Mixture modeling

Modeling observed data as a mixture of groups is fairly intuitive, and the 
process is iterative:

[![Old faithful geyser eruption delays and durations](EM_Clustering_of_Old_Faithful_data.gif){fig-align="left"}](https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm)

In the `bifurcatoR` package, we farm out the compute-intensive iteration to
the `mixR` package, because it's fast (using `Rcpp` for loops) and it supports
Weibull mixture models (as for survival analyses).

```{webr-r}
library(mixR)
paste("mixR", packageVersion("mixR"))
paste("Rcpp", packageVersion("Rcpp"))
```

It's a good idea to keep track of versions, in case something were to change.

When this document was first compiled, the versions used were:

```{r}
#| label: Versions
#| warning: false

paste("mixR", packageVersion("mixR"))
paste("Rcpp", packageVersion("Rcpp"))
paste("bifurcatoR", packageVersion("bifurcatoR"))
```

### Mixture models: the math

Below you can find a quick review of mixture model math.

::: {.callout-tip collapse="true" title="Mixture model math (click to expand)"}

Formally, a _finite mixture model_ is a statistical model where two or more
random processes, usually with different averages, happen to best explain the 
patterns in observed data. If the processes are distinguished by something like 
a genotype or an observable phenotype, we might apply a statistical test (like
Student's _t_-test) to gauge how often we'd see such differences by chance. But 
in our line of work, we often want to identify distinguishable lumps that do not
correspond to labels such as genotypes. This is where mixture models come in 
handy. A simple example is a mixture of two Gaussian (Normal) distributions:

$$ 
p(x) = \Sigma^K_{k=1}\pi_k\mathcal{N}(x|\mu_k,\sigma_k)
$$ 

If we only have two components (K=2), then the probability $\pi_1$ of being in
group 1 is $1 - \pi_2$, where $\pi_2$ is the probability of NOT being in it.
Formally, $\pi_k = Pr(K = k | X = x)$. In a simple two-component model, we can 
start from a guess for $\pi_1$ based on k-means or cutting a dendrogram.
We will seek parameters $\theta_k = (\mu_k, \sigma_k)$ for each group $k$
to maximize the probability of observing our actual data given our model.

The joint probability $\prod_{i=1}^n p(x; \theta)$ of observing the data $X$ 
given the proposed parameters $\theta$ is referred to as the 
_likelihood_ $\mathcal{L}(\theta|X)$ of the model, with $n$ observations and 
parameters $\theta = (\theta_1, ..., \theta_K) = (\theta_1, \theta_2)$ for us.

$$ 
\mathcal{L}(\theta|X) = \prod_{i=1}^n \sum_{k=1}^k \pi_k N(x_i; \theta_k)
                      = \prod_{i=1}^n (\pi_1 N(x_i; \theta_1) + 
                        (1 - \pi_1) N(x_i; \theta_2))
$$ 

Normally we could take logs, set the first and second derivatives to 0, and 
solve for appropriate values of $\theta$, but since there is a sum in the way,
we alternate back and forth between assigning each observation to group 1 or 2, 
then solving for the parameters $\theta_1$ and $\theta_2$ which maximize
$\mathcal{L}(\theta_k|X_i)$ for all $X_i$ where $K_i = k$. It turns out that  
$X$ need not be from a Normal (Gaussian) distribution for this to work, 
something that will be explored later.

Convergence can take a while if there are a many observations, which is why we 
use `mixR` for the calculations. More on the mathematical details and cute math
tricks can be found at
[Matt Stephens' Five Minute Stats](https://stephens999.github.io/fiveMinuteStats/intro_to_em.html).

::: 


## A preview from clinical trials

Here we fit a mixture model to expression of EVI1 from the _MECOM_ gene locus.

```{r}
#| label: MLL mixture model
#| warning: false

# identical to data(MLL, package="bifurcatoR")
library(bifurcatoR)
data(MLL, package="bifurcatoR")
MLLcsv <- read.csv(url("https://trichelab.github.io/data/MLL.csv"), row=1)
stopifnot(identical(MLL, MLLcsv))
MLL <- MLLcsv

# fit mixture 
library(mixR)
MLL_EVI1_fit <- mixfit(MLL$MECOM, ncomp=2)
plot(MLL_EVI1_fit, xlab="log(EVI1 transcripts)",
     title="EVI1 expression in MLL-rearranged leukemia")
classification <- MLL_EVI1_fit$comp.prob # component probability, i.e., group
MLL$EVI1high <- (apply(classification, 1, which.max) > 1)
```

The above grouping is highly predictive of response to therapy in leukemia
driven by MLL gene fusions:

```{r}
#| label: Survival by mixture
#| warning: false

library(survival) 
library(survminer)
mixFit <- survfit(Surv(OS, OSI) ~ EVI1high, data=MLL)
ggsurvplot(mixFit, conf.int=TRUE, pval=TRUE, xlab="Overall survival (days)",
      tables.theme = theme_cleantable(), palette=c("darkgreen","darkred"))

```

### Table 1

MLL-rearranged subjects from COG AML trials have the following characteristics:

```{r}
#| label: Table 1
#| warning: false

library(table1) 
pvalue <- function(x, ...) {
  y <- unlist(x)
  g <- factor(rep(1:length(x), times=sapply(x, length)))
  if (is.numeric(y)) p <- t.test(y ~ g)$p.value
  if (!is.numeric(y)) p <- chisq.test(table(y, g))$p.value
  c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}

common <- names(which(table(MLL$fusion) > 5))
MLL$AgeGroup <- relevel(relevel(factor(MLL$AgeGroup), 2), 3)
MLL$Fusion <- ifelse(MLL$fusion %in% common, 
                     MLL$fusion, "Other MLL fusions")
MLL$Fusion <- relevel(relevel(relevel(factor(MLL$Fusion), 6), 4), 6)
table1(~ AgeGroup + Sex + Fusion | Protocol,
       data=MLL, extra.col=list(p=pvalue))

```

In the following sections, you can run (and edit) our code and data in your 
web browser to follow along (or test assumptions we have made in our analyses).


## Non-genetic heterogeneity in leukemia

We often want to choose the most useful predictor of some outcome, not just the
easiest to measure. In childhood leukemia, an example of this comes from
the Mixed-Lineage Leukemia or MLL protein, encoded by the _KMT2A_ gene on 
chromosome 11, band q23. Gene fusions involving MLL are quite common in infant
leukemia, with dozens of partner genes, historically yielding poor outcomes.
Over the past few decades, improvements in care have changed this to the point
that most people now ask instead, "what determines if these drugs will work?"
As we shall see, a patient's genetic lesions aren't always the best answer. 


### Thirty years of trial data

```{webr-r}
# for interactive usage; identical to data(MLL, package="bifurcatoR")
MLL <- read.csv(url("https://trichelab.github.io/data/MLL.csv"), row=1)

library(mixR)
MLL_EVI1_fit <- mixfit(MLL$MECOM, ncomp=2)
plot(MLL_EVI1_fit, xlab="log(EVI1 transcripts)",
     title="EVI1 expression in MLL-rearranged leukemia")

classification <- MLL_EVI1_fit$comp.prob # component probability, i.e., group
MLL$EVI1high <- (apply(classification, 1, which.max) > 1)
```

Above, we fitted a mixture model to expression of the _EVI1_ isoform of the 
_MECOM_ gene locus, which has the peculiar property of acting as either an 
oncogene or a tumor suppressor, depending on which isoform is expressed. 
It looks like there really are just two major groups. Let's label the patients 
by which group they fall into. (Note that the high-expression group is smaller.)
For a quick sanity check, let's also plot the group-wise expression levels. 

```{webr-r}
# Be sure to run the preceding chunks!
library(ggbeeswarm)
ggplot(MLL, aes(x=EVI1high, y=MECOM, color=fusion, alpha=I(0.5))) +
  geom_beeswarm() + theme_classic() + ylab("log(EVI1 mRNA)")
```

### A survival analysis of gene fusions

In large clinical trials, the primary endpoint (the thing the trial is meant
to improve upon) usually involves time to an event. If that event is death, 
we refer to the analysis as a survival analysis. We might ask whether the 
gene fusion partner is informative in terms of MLL-rearranged patient survival.

```{webr-r}
# run the earlier chunks first!
library(survival) 
library(survminer)
fusionFit <- survfit(Surv(OS, OSI) ~ fusion, data=MLL)
ggsurvplot(fusionFit, conf.int=TRUE, legend="none", xlab="Time in days")
```

Well, that's a big huge mess.  Let's limit the analysis to fusion partners that
appear more than 5 times in the data, since otherwise we don't have much power.

### A survival analysis of common MLL fusions

```{webr-r}
# Be sure to run the preceding chunks!
common <- names(which(table(MLL$fusion) > 5))
MLLcommon <- subset(MLL, fusion %in% common)
commonFusionFit <- survfit(Surv(OS, OSI) ~ fusion, data=MLLcommon)
ggsurvplot(commonFusionFit, conf.int=TRUE, legend="right", xlab="Time in days")
```

Now we're getting somewhere, but as the confidence intervals (pastel highlights)
suggest, there's a tremendous amount of overlap between some 'common' fusions.
For example, patients with _SEPT6_ fusions clearly do better than patients with
_MLLT4_. Are there individual-level differences at play here?

### Examining evidence for a mixture 

```{webr-r}
# Be sure to run the preceding chunks!
ggplot(MLLcommon, aes(x=fusion, y=MECOM, color=fusion, alpha=I(0.5))) +
  geom_beeswarm() + theme_classic() + ylab("log(EVI1 mRNA)") + 
  theme(axis.text.x = element_text(angle = 45, vjust=0.5))  
```

Hmm. It looks like most _SEPT6_ fusion cases have low _EVI1_ expression, whereas
most _MLLT4_ cases have high _EVI1_ expression. Perhaps this is worth modeling.
Let's compare how well our EVI1/_MECOM_ RNA expression predicts survival in 
MLL-rearranged leukemia cases, and let's see if this might be better than basing
treatment on the fusion partner. (_EVI1_-high cells tend to be chemoresistant.)

### A mixture of outcomes

```{webr-r}
# Run the previous chunks first!
library(survminer)
rnaFit <- survfit(Surv(OS, OSI) ~ EVI1high, data=MLL)
ggsurvplot(rnaFit, conf.int=TRUE, pval=TRUE, xlab="Overall survival (days)",
      tables.theme = theme_cleantable(), palette=c("darkgreen","darkred"))
```

It sure looks like EVI1/_MECOM_ expression level predicts outcomes better. 
Of course, it might be even more straightforward to build these and other 
models if it turned out that the treatment outcome was binary, i.e. some 
patients will be cured and some won't. Then we could focus the majority of 
our research efforts on finding cures for those patients who don't have any
good treatment options. We can fit mixtures to time-to-event (survival) 
outcomes, too, but we will want to use a slightly different model, since 
the assumption underlying survival analysis is that the risk of having an 
event goes up exponentially over time as a function of the hazard rate. Here
we will also entertain the possibility of there being more than two groups. 
(Most leukemia patients are considered cured after 5 years, after which point
anyone who hasn't succumbed to their disease is eventually lost to followup.)

### A mixture of survival distributions

```{webr-r}
# Run previous chunks first!
library(mixR) 

# two-component Weibull mixture model 
weibMix <- mixfit(MLL$OS, family="weibull", ncomp=2)
(p2 <- plot(weibMix, xlab="Overall survival", title="k = 2"))

# three-component Weibull mixture model
weibMix3 <- mixfit(MLL$OS, family="weibull", ncomp=3)
(p3 <- plot(weibMix3, xlab="Overall Survival", title="k = 3"))

library(patchwork)
p2 + p3 

# Which does the information criterion suggest is best?
select(MLL$OS, ncomp=2:3, family="weibull")
```

It appears that MLL-rearranged patients fall into two outcome groups. For lack
of better words, we will refer to these groups as standard-risk and high-risk.
How well does EVI1/_MECOM_ expression predict a patient's eventual outcome?

### A test of phenotypic and outcome fits

```{webr-r}
# Run the previous chunks first
outcomeGroup <- weibMix$comp.prob
rownames(outcomeGroup) <- rownames(MLL) 
MLL$highRisk <- (apply(outcomeGroup, 1, which.max) < 2)
with(MLL, table(highRisk, EVI1high))
chisq.test(with(MLL, table(highRisk, EVI1high)))
```

Not perfect, but certainly better than expected by chance, given the grouping.
Obviously, there are many other possible predictors of outcome, and we include 
numerous gene expression levels along with patient age and (where available) 
blast counts (i.e., how many of the cells in their bone marrow are immature). 
For example, the _CD34_ and _MECOM_ genes turn out to be jointly informative;
and modeling the two together turns out to be more powerful than either alone.
But having an idea of whether the data supports natural grouping sure is handy.
