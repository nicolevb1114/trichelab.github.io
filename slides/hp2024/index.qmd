---
format: 
  live-revealjs:
    theme: default
    scrollable: true
    slide-number: true
    html-math-method: mathjax
    include-before: [ '<script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax: {enableAssistiveMml: false}});</script>']
    footer: "[Source code](https://github.com/trichelab/trichelab.github.io/blob/gh-pages/slides/hp2024/index.qmd)"
engine: knitr
title: "Historical Perspectives 2024"
author: "Tim Triche, Jr."
institute: "Van Andel Institute"
webr:
  packages: 
    - ggplot2
    - ggbeeswarm
pyodide:
  packages:
    - scipy
    - plotnine
execute: 
  warning: false
---
{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}


## quarto-live

These slides are laid out using [quarto-live](https://r-wasm.github.io/quarto-live/) with [revealjs](https://quarto.org/docs/presentations/revealjs/).

Give it a try sometime. You might like it enough for your own presentations.

Most code chunks are editable and executable in your (or your user's!) browser.

---

## Bernoulli <-> binomial relationships

This code is live.  Try editing it and/or clicking 'Start Over' to verify. 

```{webr}
rbernoulli <- function(n, p=0.5) ifelse(stats::runif(n) > (1 - p), 1, 0)
par(mfrow=c(2,2))
plot(density(rbernoulli(1000, p=(1/6))))
plot(density(rbinom(n=1000, size=1, p=(1/6))))
```

---

## Poisson <-> Normal relationships

This code is live too. Next slide we'll use it for simulations.


```{webr}
par(mfrow=c(2,2))
plot(rnorm(1000, mean=9, sd=3))
plot(density(rnorm(1000, mean=9, sd=3)))
hist(rnorm(1000, mean=9, sd=3))
hist(rpois(1000, lambda=9))
```

---

## Binomial convergence to Poisson {.smaller}

$$
\begin{align}
\text{Let}\ & X \sim Bin(n, p),\ 
              \lim_{n \to \infty, p \to 0} np = \lambda, \text{and}\ 
              e^{-\lambda}=\lim_{n\to\infty}\left(1-\frac{\lambda}{n}\right)^n\\[3px]
\text{then}\    & \class{fragment}{X \sim Pois(\lambda)}\\[3px] 
Pr(X=k|\lambda) &= 
  \class{fragment}{\lim_{n \to \infty} 
                   \binom{n}{k} \left(\frac{\lambda}{n} \right)^{k}  
                                \left(1 - \frac{\lambda}{n}\right)^{n-k}}\\[3px]
  \class{fragment}{{}} 
                &= 
  \class{fragment}{\left( \frac{\lambda^k}{k!} \right) 
                   \lim_{n \to \infty} 
                   \left( 1 - \frac{\lambda}{n}\right)^{n} 
                   \lim_{n \to \infty} \left( 1 - \frac{\lambda}{n}\right)^{-k} 
                   \left[
                     \lim_{n \to \infty} 
                     \frac{n!}{(n-k)!} \left( \frac{1}{n^k} \right)
                     \to 1 
                   \right]} \\[3px]
  \class{fragment}{{}} 
                &= 
  \class{fragment}{\left( \frac{\lambda^k}{k!} \right) 
                   \lim_{n \to \infty} 
                   \left( 1 - \frac{\lambda}{n}\right)^{n} 
                   \left[
                     \lim_{n \to \infty}\left(1 - \frac{\lambda}{n}\right)^{-k}
                     \to 1 
                  \right]} \\[3px]
  \class{fragment}{{}} 
                &= 
  \class{fragment}{\left( \frac{\lambda^k}{k!} \right) 
                   \left[
                     \lim_{n \to \infty} \left(1 - \frac{\lambda}{n}\right)^{n}
                     \equiv e^{-\lambda} 
                   \right]}\\[3px]
  \class{fragment}{Pr(X=k|\lambda)} &= \class{fragment}{\frac{\lambda^{k}e^{-\lambda}}{k!}}
\end{align}
$$

---

## Poisson convergence to Normal

Let $X_1, X_2, ..., X_{\lambda}$ be independent Poisson random variables. 

If $Y = \sum^{\lambda}_{i=1}X_i$, then $Y \sim Pois(\lambda)$.

Given that Y is a sum of i.i.d. random variables, we can then state (as \lambda grows) that

$$
Z = \frac{Y-\lambda}{\sqrt{\lambda}} \to N(0,1)
$$

Which is a standard Normal distribution around the estimate of $\lambda$ 
and thus $Y \to N(\lambda, \lambda)$ as $\lambda \to \infty$.

---

## Your turn

`rbinom` generates random binomial variates.
`rpois` generates random Poisson variates. 
`rnorm` generates random Normal variates.
How many (`n=`) trials do you need to show this?

```{webr}
p <- 1/6
X <- rbinom(n=1000, size=1, p=p)
Y <- rpois(n=1000, lambda=(1000*p))
Z <- rnorm(n=1000, mean=(1000*p), sd=sqrt(1000*p))

# plots!
```
---
