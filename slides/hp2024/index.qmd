---
format: 
  live-revealjs:
    margin: 0.05
    theme: default
    smaller: true
    slide-number: true
    html-math-method: mathjax
    include-before: [ '<script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax: {enableAssistiveMml: false}});</script>']
    footer: "[Source code](https://github.com/trichelab/trichelab.github.io/blob/gh-pages/slides/hp2024/index.qmd)"
engine: knitr
title: "Historical Perspectives 2024"
author: "Tim Triche, Jr."
institute: "Van Andel Institute"
webr:
  packages: 
    - ggplot2
    - ggbeeswarm
pyodide:
  packages:
    - scipy
    - plotnine
execute: 
  warning: false
---
{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}


## quarto-live

These slides are laid out using [quarto-live](https://r-wasm.github.io/quarto-live/) with [revealjs](https://quarto.org/docs/presentations/revealjs/).

Give it a try sometime. You might like it enough for your own presentations. There is a link to the source
 .qmd document at the bottom of each slide.

Most code chunks are editable and executable in your (or your user's!) browser.

---

## Bernoulli <-> binomial relationships

Code is live. Try editing it & clicking 'Run' or 'Start Over'.

```{webr}
rbernoulli <- function(n, p=0.5) ifelse(stats::runif(n) > (1 - p), 1, 0)
par(mfrow=c(2,2))
plot(density(rbernoulli(1000, p=(1/6))))
plot(density(rbinom(n=1000, size=1, p=(1/6))))
```

---

## Binomial convergence to Poisson

$$
\begin{align}
\text{Let}\ & X \sim Bin(n, p),\ 
              \lim_{n \to \infty, p \to 0} np = \lambda, \text{and}\ 
              e^{-\lambda}=\lim_{n\to\infty}\left(1-\frac{\lambda}{n}\right)^n\\[3px]
Pr(X=k|\lambda) &= 
  \lim_{n \to \infty} 
  \binom{n}{k} \left(\frac{\lambda}{n} \right)^{k}  
               \left(1 - \frac{\lambda}{n}\right)^{n-k},
  \text{ since } 
  \binom{n}{k} = \left(\frac{1}{k!})\right)\left(\frac{n!}{(n-k)!}\right)
  \text{ and } 
  \left(\frac{\lambda}{n}\right)^k = \lambda^k\left(\frac{1}{n^k}\right).\\[3px]
                &= 
  \class{fragment}{\left( \frac{\lambda^k}{k!} \right) 
                   \lim_{n \to \infty} 
                   \left( 1 - \frac{\lambda}{n}\right)^{n} 
                   \lim_{n \to \infty} \left( 1 - \frac{\lambda}{n}\right)^{-k} 
                   \left[
                     \lim_{n \to \infty} 
                     \frac{n!}{(n-k)!} \left( \frac{1}{n^k} \right)
                     \to 1 
                   \right]} \\[3px]
                &= 
  \class{fragment}{\left( \frac{\lambda^k}{k!} \right) 
                   \lim_{n \to \infty} 
                   \left( 1 - \frac{\lambda}{n}\right)^{n} 
                   \left[
                     \lim_{n \to \infty}\left(1 - \frac{\lambda}{n}\right)^{-k}
                     \to 1 
                  \right]} \\[3px]
                &= 
  \class{fragment}{\left( \frac{\lambda^k}{k!} \right) 
                   \left[
                     \lim_{n \to \infty} \left(1 - \frac{\lambda}{n}\right)^{n}
                     \equiv e^{-\lambda} 
                   \right]}\\[3px]
  \class{fragment}{Pr(X=k|\lambda)} &= \class{fragment}{\frac{\lambda^{k}e^{-\lambda}}{k!}}
\end{align}
$$

---

## Poisson <-> Normal relationships

In a moment, we'll use this for some simulations.

```{webr}
par(mfrow=c(2,2))
hist(rnorm(10000, mean=16, sd=4))
hist(rpois(10000, lambda=16))
```

---

## Poisson convergence to Normal

Let $X_1, ..., X_{\lambda}$ be independent, identically distributed (iid) Poisson random variables. 

If $Y = \sum^{\lambda}_{i=1}X_i$, then $Y \sim Pois(\lambda)$.

Given Y as a sum of iid random variables, then as $\lambda$ grows,

$$
Z = \frac{Y-\lambda}{\sqrt{\lambda}} \to N(0,1)
$$

And $Z$ has a standard Normal distribution around the estimate of $\lambda$, 
so $Y \sim Pois(\lambda) \to N(\mu = \lambda, \sigma = \sqrt{\lambda})$ as $\lambda \to \infty$.

---

## Your turn

`rbinom` generates random binomial variates.
`rpois` generates random Poisson variates. 
`rnorm` generates random Normal variates.
How many (`n=`) trials do you need to show this?

```{webr}
p <- 1/6
X <- rbinom(n=1000, size=1, p=p)
Y <- rpois(n=1000, lambda=(1000*p))
Z <- rnorm(n=1000, mean=(1000*p), sd=sqrt(1000*p))

# make some plots!
```
